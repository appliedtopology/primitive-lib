package $packageName;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

#set ($type1 = $templateTypes.get(0))
#set ($type2 = $templateTypes.get(1))
#set ($classTag = "ComparablePair")
#set ($className = $utility.getAnnotatedClassName($classTag, $templateTypes, $genericTypes))
#set ($basicClassName = $utility.getClassName($classTag, $templateTypes, $genericTypes))
#set ($superName = $utility.getAnnotatedClassName("Pair", $templateTypes, $genericTypes))
#set ($interfaceName = "Comparable$utility.getGenericAnnotation([$className], [])")

/**
 * This class implements a pair (a, b), where a is a $type1 and b 
 * is a $type2. It implements the Comparable interface with dictionary
 * ordering. Note that any instance of this class is immutable, and
 * implements value semantics.
 * 
 * @author Andrew Tausz
 *
 */
public class $className extends $superName implements $interfaceName {
	/**
	 * Constructor which initializes the pair.
	 * 
	 * @param first the value of the first component
	 * @param second the value of the second component
	 */
	public $className($type1 first, $type2 second) {
		super(first, second);
	}
	
	/**
	 * Constructor which initializes from another $className.
	 * 
	 * @param pair the $className to initialize from
	 */
	public $className($className pair) {
		super(pair.first, pair.second);
	}
	
	public int compareTo($className o) {
	#if ($utility.isPrimitive($type1))
		$type1 difference1 = this.first - o.first;
		if (difference1 > 0) {
			return 1;
		} else if (difference1 < 0) {
			return -1;
		}
	#else
		int comparison1 = this.first.compareTo(o.first);
		if (comparison1 != 0) {
			return comparison1;
		}
	#end

	#if ($utility.isPrimitive($type2))
		$type2 difference2 = this.second - o.second;
		if (difference2 > 0) {
			return 1;
		} else if (difference2 < 0) {
			return -1;
		}
		return 0;
	#else
		return this.second.compareTo(o.second);
	#end
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 37).append(first).append(second).toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final $className other = ($utility.getWildcardClassName($classTag, $templateTypes, $genericTypes)) obj;
		return new EqualsBuilder().append(first, other.first).append(second, other.second).isEquals();
	}
}