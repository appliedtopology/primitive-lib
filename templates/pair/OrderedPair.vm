package $packageName;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

#set ($className = $utility.getClassName("OrderedPair", $type1, $type2))

/**
 * This class implements a pair (a, b), where d is a $type1 and l 
 * is a $type2. It implements the Comparable interface with dictionary
 * ordering. Note that any instance of this class is immutable, and
 * implements value semantics.
 * 
 * @author Andrew Tausz
 *
 */
public class $className$utility.generateGenericAnnotationImplements($type1, $type2, "Comparable") implements Comparable<$className$utility.generateGenericAnnotation($type1, $type2)> {
	/*
	 * Make the fields first and second final to maintain immutability.
	 */
	private final $type1 first;
	private final $type2 second;
	
	/**
	 * Constructor which initializes the pair.
	 * 
	 * @param first the value of the first component
	 * @param second the value of the second component
	 */
	public $className($type1 first, $type2 second) {
		this.first = first;
		this.second = second;
	}
	
	/**
	 * Constructor which initializes from another $className.
	 * 
	 * @param pair the $className to initialize from
	 */
	public $className($className$utility.generateGenericAnnotation($type1, $type2) pair) {
		this.first = pair.first;
		this.second = pair.second;
	}
	
	/**
	 * Get the first component.
	 * 
	 * @return the first component
	 */
	public $type1 getFirst() {
		return this.first;
	}
	
	/**
	 * Get the second component.
	 * 
	 * @return the second component
	 */
	public $type2 getSecond() {
		return this.second;
	}
	
	@Override
	public String toString() {
		return ("(" + first + ", " + second + ")");
	}
	
	public int compareTo($className$utility.generateGenericAnnotation($type1, $type2) o) {
	#if ($utility.isPrimitive($type1))
		$type1 difference1 = this.first - o.first;
		if (difference1 > 0) {
			return 1;
		} else if (difference1 < 0) {
			return -1;
		}
	#else
		int comparison1 = this.first.compareTo(o.first);
		if (comparison1 != 0) {
			return comparison1;
		}
	#end

	#if ($utility.isPrimitive($type2))
		$type2 difference2 = this.second - o.second;
		if (difference2 > 0) {
			return 1;
		} else if (difference2 < 0) {
			return -1;
		}
		return 0;
	#else
		return this.second.compareTo(o.second);
	#end
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 37).append(first).append(second).toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final $className other = ($className$utility.generateGenericWildcards($type1, $type2)) obj;
		return new EqualsBuilder().append(first, other.first).append(second, other.second).isEquals();

	}
}