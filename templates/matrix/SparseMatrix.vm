package $packageName;

import java.util.Iterator;

#set ($type = $templateTypes.get(0))
#set ($className = $utility.getAnnotatedClassName("SparseMatrix", $templateTypes, $genericTypes))
#set ($basicName = $utility.getClassName("SparseMatrix", $templateTypes))
#set ($superName = $utility.getAnnotatedClassName("AbstractMatrix", $templateTypes, $genericTypes))
#set ($entryClassName = $utility.getAnnotatedClassName("MatrixEntry", $templateTypes, $genericTypes))
#set ($vectorClassName = $utility.getAnnotatedClassName("SparseVector", $templateTypes, $genericTypes))
#set ($superVectorClassName = $utility.getAnnotatedClassName("AbstractVector", $templateTypes, $genericTypes))
#set ($iteratorClassName = $utility.getAnnotatedClassName("SparseMatrixIterator", $templateTypes, $genericTypes))

#set ($mapType = $utility.getMapType("int", "Object"))
#set ($iteratorType = $utility.getMapIteratorType("int", "Object"))

#if ($type == "boolean")

#include("templates/matrix/boolean/BooleanSparseMatrix.java");
#stop

#end

public class $className implements $superName {
	/**
	 * We use a row-wise storage scheme. The variable map stores
	 * the rows of the matrix on an as-needed basis. Each row is a 
	 * $vectorClassName. This choice was made so that matrix-vector
	 * products can be computed very quickly.
	 */
	protected final $mapType<$vectorClassName> map = new $mapType<$vectorClassName>();

	protected final int rows;
	protected final int columns;
	
	public $basicName(int rows, int columns) {
		this.rows = rows;
		this.columns = columns;
	}
	
	public $type get(int row, int column) {
		if (!this.map.contains(row)) {
			return $utility.getDefaultElement($type);
		}
		return this.map.get(row).get(column);
	}

	public int getNumColumns() {
		return this.columns;
	}

	public int getNumRows() {
		return this.rows;
	}

	public Iterator<$entryClassName> iterator() {
		return new $iteratorClassName(this);
	}

	public $superName like(int rows, int columns) {
		return new $className(rows, columns);
	}
	
	public int getNumNonzeroElements() {
		int num = 0;
		for ($iteratorType<$vectorClassName> iterator = this.map.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			num += iterator.value().getNumNonzeroElements();
		}
		return num;
	}

	#if ($utility.isPrimitive($type))
	public $superVectorClassName multiply($superVectorClassName vector) {
		$superVectorClassName result = new $vectorClassName(this.rows);
		$type innerProductValue = 0;
		for ($iteratorType<$vectorClassName> iterator = this.map.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			innerProductValue = iterator.value().innerProduct(vector);
			if (innerProductValue != 0) {
				result.set(iterator.key(), innerProductValue);
			}
		}
		
		return result;
	}
	#end

	public void set(int row, int column, $type value) {
		if (value == $utility.getDefaultElement($type)) {
			if (!this.map.contains(row)) {
				return;
			} else {
				this.map.remove(column);
			}
		} else {
			if (!this.map.contains(row)) {
				this.map.put(row, new $vectorClassName(this.columns));
			}
			this.map.get(row).set(column, value);
		}
	}
}