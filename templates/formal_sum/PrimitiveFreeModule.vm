package $packageName;

#if ($templateTypes.get(0) == "boolean")

#include("templates/formal_sum/boolean/BooleanPrimitiveFreeModule.java");
#stop

#end

import java.util.Iterator;

#set ($coefficientType = $templateTypes.get(0))
#set ($objectType = $genericTypes.get(0))
#set ($className = $utility.getAnnotatedClassName("PrimitiveFreeModule", $templateTypes, $genericTypes))
#set ($basicClassName = $utility.getClassName("PrimitiveFreeModule", $templateTypes, $genericTypes))
#set ($superName = $utility.getAnnotatedClassName("AbstractModule", $templateTypes, $genericTypes))
#set ($sumClassName = $utility.getAnnotatedClassName("SparseFormalSum", $templateTypes, $genericTypes))

#set ($mapType = $utility.getMapType($objectType, $coefficientType) + $utility.getGenericAnnotation([$objectType, $coefficientType]))
#set ($iteratorType = $utility.getMapIteratorType($objectType, $coefficientType) + $utility.getGenericAnnotation([$objectType, $coefficientType]))

public abstract class $className extends $superName {
	
	public $basicClassName() {}
	
	public $sumClassName add($sumClassName a, $sumClassName b) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = null;
			
		if (a.size() > b.size()) {
			result = this.createNewSum(a);
			iterator = b.map.iterator();
		} else {
			result = this.createNewSum(b);
			iterator = a.map.iterator();
		}
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, iterator.value(), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = null;
		
		if (a.size() > b.size()) {
			result = this.createNewSum(a);
			iterator = b.map.entrySet().iterator();
		} else {
			result = this.createNewSum(b);
			iterator = a.map.entrySet().iterator();
		}
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, entry.getValue(), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	public $sumClassName subtract($sumClassName a, $sumClassName b) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = b.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, -(iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = b.map.entrySet().iterator();
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, -(entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	public $sumClassName multiply($coefficientType r, $sumClassName a) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = a.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, (r * iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = a.map.entrySet().iterator();;
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, (r * entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	public $sumClassName negate($sumClassName a) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = a.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, -(iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = a.map.entrySet().iterator();
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, -(entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	#if (!($coefficientType == "int"))
	public $sumClassName multiply(int r, $sumClassName a) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = a.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, (r * iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = a.map.entrySet().iterator();
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, (r * entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	#end
	
	/**
	 * This function performs the operation a = a + b.
	 * 
	 * @param a the value to accumulate in
	 * @param b the module element to add
	 */
	public void accumulate($sumClassName a, $sumClassName b) {
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		for ($iteratorType iterator = b.map.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			this.addObject(a, iterator.value(), iterator.key());
		}
		
		#else
		
		for (Map.Entry<$objectType, $coefficientType> entry: b.map.entrySet()) {
			this.addObject(a, entry.getValue(), entry.getKey());
		}
		
		#end
	}
	
	/**
	 * This function performs the operation a = a + r * b.
	 * 
	 * @param a the value to accumulate in
	 * @param b the module element to add
	 * @param c the scalar multiplier
	 */
	public void accumulate($sumClassName a, $sumClassName b, $coefficientType r) {
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		for ($iteratorType iterator = b.map.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			this.addObject(a, (r * iterator.value()), iterator.key());
		}
		
		#else
		
		for (Map.Entry<$objectType, $coefficientType> entry: b.map.entrySet()) {
			this.addObject(a, (r * entry.getValue()), entry.getKey());
		}
		
		#end
	}
	
	public void accumulate($sumClassName a, $objectType b) {
		this.addObject(a, 1, b);
	}
	
	public void accumulate($sumClassName a, $objectType b, $coefficientType r) {
		this.addObject(a, r, b);
	}
	
	private void addObject($sumClassName formalSum, $coefficientType coefficient, $objectType object) {
		if (coefficient == 0) {
			return;
		}
		
		if (formalSum.containsObject(object)) {
			$coefficientType newCoefficient = formalSum.getCoefficient(object) + coefficient;
			if (newCoefficient == 0) {
				formalSum.remove(object);
			} else {
				formalSum.put(newCoefficient, object);
			}
		} else {
			formalSum.put(coefficient, object);
		}
	}

	public $sumClassName createNewSum() {
		return new $sumClassName();
	}

	public $sumClassName createNewSum($coefficientType coefficient, $objectType object) {
		return new $sumClassName(coefficient, object);
	}

	public $sumClassName createNewSum($sumClassName contents) {
		return new $sumClassName(contents);
	}
}