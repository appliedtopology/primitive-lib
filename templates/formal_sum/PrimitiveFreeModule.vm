package $packageName;

#if ($templateTypes.get(0) == "boolean")

#include("templates/formal_sum/boolean/BooleanPrimitiveFreeModule.java");
#stop

#end

import java.util.Iterator;

#set ($coefficientType = $templateTypes.get(0))
#set ($objectType = $genericTypes.get(0))

#set ($sumClassName = $utility.getAnnotatedClassName("SparseFormalSum", $templateTypes, $genericTypes))
#set ($ringClassName = $utility.getAnnotatedClassName("AbstractRing", [$coefficientType], []))
#set ($className = $utility.getAnnotatedClassName("PrimitiveFreeModule", $templateTypes, $genericTypes))
#set ($basicClassName = $utility.getClassName("PrimitiveFreeModule", $templateTypes, $genericTypes))
#set ($superName = $utility.getAnnotatedClassName("AbstractModule", $templateTypes, [$sumClassName]))

#set ($mapType = $utility.getMapType($objectType, $coefficientType) + $utility.getGenericAnnotation([$objectType, $coefficientType]))
#set ($iteratorType = $utility.getMapIteratorType($objectType, $coefficientType) + $utility.getGenericAnnotation([$objectType, $coefficientType]))

/**
 * This class implements the algebraic operations of a free module with generating elements of
 * type $objectType, and over a ring with elements of type $coefficientType. Elements of the free 
 * module are represented by formal sums of entries in $objectType. The coefficient operations on 
 * the sums are simply the standard primitive operations on the type $coefficientType.
 * 
 * @author autogen
 *
 * @param <$coefficientType> the coefficient type
 * @param <$objectType> the object type
 */
public class $className implements $superName {
	
	public $basicClassName() {}
	
	public $sumClassName add($sumClassName a, $sumClassName b) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = null;
			
		if (a.size() > b.size()) {
			result = this.createNewSum(a);
			iterator = b.map.iterator();
		} else {
			result = this.createNewSum(b);
			iterator = a.map.iterator();
		}
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, iterator.value(), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = null;
		
		if (a.size() > b.size()) {
			result = this.createNewSum(a);
			iterator = b.map.entrySet().iterator();
		} else {
			result = this.createNewSum(b);
			iterator = a.map.entrySet().iterator();
		}
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, entry.getValue(), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	public $sumClassName subtract($sumClassName a, $sumClassName b) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = b.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, -(iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = b.map.entrySet().iterator();
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, -(entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	public $sumClassName multiply($coefficientType r, $sumClassName a) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = a.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, (r * iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = a.map.entrySet().iterator();;
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, (r * entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	public $sumClassName negate($sumClassName a) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = a.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, -(iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = a.map.entrySet().iterator();
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, -(entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	
	#if (!($coefficientType == "int"))
	public $sumClassName multiply(int r, $sumClassName a) {
		$sumClassName result = null;
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = a.map.iterator();
		
		while(iterator.hasNext()) {
			iterator.advance();
			addObject(result, (r * iterator.value()), iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = a.map.entrySet().iterator();
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			addObject(result, (r * entry.getValue()), entry.getKey());
		}
		
		#end
		
		return result;
	}
	#end
	
	/**
	 * This function computes the inner product between two formal sums.
	 * 
	 * @param a
	 * @param b
	 * @return the inner product of a and b
	 */
	public $coefficientType innerProduct($sumClassName a, $sumClassName b) {
		$coefficientType sum = $utility.getDefaultElement($coefficientType);
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		$iteratorType iterator = null;
		$sumClassName other = null;
		
		if (a.size() > b.size()) {
			iterator = b.map.iterator();
			other = a;
		} else {
			iterator = a.map.iterator();
			other = b;
		}
		
		while(iterator.hasNext()) {
			iterator.advance();
			sum += iterator.value() * other.getCoefficient(iterator.key());
		}
		
		#else
		
		Iterator<Map.Entry<$objectType, $coefficientType>> iterator = null;
		$sumClassName other = null;
		
		if (a.size() > b.size()) {
			iterator = b.map.entrySet().iterator();
			other = a;
		} else {
			iterator = a.map.entrySet().iterator();
			other = b;
		}
		
		while (iterator.hasNext()) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			sum += entry.getValue() * other.getCoefficient(entry.getKey());
		}
		
		#end
		
		return sum;
	}
	
	/**
	 * This function computes the sum of two generating elements.
	 * 
	 * @param a
	 * @param b
	 * @return a + b
	 */
	public $sumClassName add($objectType a, $objectType b) {
		$sumClassName sum = this.createNewSum(a);
		this.addObject(sum, 1, b);
		return sum;
	}
	
	/**
	 * This function computes the sum of a formal sum and a basis element.
	 * 
	 * @param a
	 * @param b
	 * @return a + b
	 */
	public $sumClassName add($sumClassName a, $objectType b) {
		$sumClassName sum = this.createNewSum(a);
		this.addObject(sum, 1, b);
		return sum;
	}
	
	/**
	 * This function computes the difference of two generating elements.
	 * 
	 * @param a
	 * @param b
	 * @return a - b
	 */
	public $sumClassName subtract($objectType a, $objectType b) {
		$sumClassName sum = this.createNewSum(a);
		this.addObject(sum, -1, b);
		return sum;
	}
	
	/**
	 * This function computes the difference of a formal sum and a basis element.
	 * 
	 * @param a
	 * @param b
	 * @return a - b
	 */
	public $sumClassName subtract($sumClassName a, $objectType b) {
		$sumClassName sum = this.createNewSum(a);
		this.addObject(sum, -1, b);
		return sum;
	}
	
	/**
	 * This function performs the operation a = a + b.
	 * 
	 * @param a the value to accumulate in
	 * @param b the module element to add
	 */
	public void accumulate($sumClassName a, $sumClassName b) {
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		for ($iteratorType iterator = b.map.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			this.addObject(a, iterator.value(), iterator.key());
		}
		
		#else
		
		for (Map.Entry<$objectType, $coefficientType> entry: b.map.entrySet()) {
			this.addObject(a, entry.getValue(), entry.getKey());
		}
		
		#end
	}
	
	/**
	 * This function performs the operation a = a + r * b.
	 * 
	 * @param a the value to accumulate in
	 * @param b the module element to add
	 * @param c the scalar multiplier
	 */
	public void accumulate($sumClassName a, $sumClassName b, $coefficientType r) {
		
		#if ($utility.isPrimitive($coefficientType) || $utility.isPrimitive($objectType))
		
		for ($iteratorType iterator = b.map.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			this.addObject(a, (r * iterator.value()), iterator.key());
		}
		
		#else
		
		for (Map.Entry<$objectType, $coefficientType> entry: b.map.entrySet()) {
			this.addObject(a, (r * entry.getValue()), entry.getKey());
		}
		
		#end
	}
	
	/**
	 * This function performs the operation a = a + b where b is a basis element.
	 * 
	 * @param a the value to accumulate in
	 * @param b the element to add
	 */
	public void accumulate($sumClassName a, $objectType b) {
		this.addObject(a, 1, b);
	}
	
	/**
	 * This function performs the operation a = a + r * b.
	 * 
	 * @param a the value to accumulate in
	 * @param b the basis element to add
	 * @param c the scalar multiplier
	 */
	public void accumulate($sumClassName a, $objectType b, $coefficientType r) {
		this.addObject(a, r, b);
	}
	
	/**
	 * This function adds the given object to the formal sum with given coefficient. In the event
	 * that the object is already present it computes the sum of the passed in and existing 
	 * coefficients and updates the coefficient with the result. In the event that the object is
	 * not present already, it adds a new object with the given coefficient.
	 * 
	 * @param formalSum the sum to add to
	 * @param coefficient the coefficient of the object to add
	 * @param object the object (basis element) to add
	 */
	private void addObject($sumClassName formalSum, $coefficientType coefficient, $objectType object) {
		if (coefficient == 0) {
			return;
		}
		
		if (formalSum.containsObject(object)) {
			$coefficientType newCoefficient = formalSum.getCoefficient(object) + coefficient;
			if (newCoefficient == 0) {
				formalSum.remove(object);
			} else {
				formalSum.put(newCoefficient, object);
			}
		} else {
			formalSum.put(coefficient, object);
		}
	}

	public $sumClassName getAdditiveIdentity() {
		return new $sumClassName();
	}

	/**
	 * This function creates an empty new formal sum.
	 * 
	 * @return an empty new formal sum
	 */
	public $sumClassName createNewSum() {
		return new $sumClassName();
	}

	/**
	 * This function creates a new formal sum containing a single object with default
	 * coefficient equal to the multiplicative identity of the ring.
	 * 
	 * @param object the object to initialize the sum with
	 * @return a new sum containing the supplied object
	 */
	public $sumClassName createNewSum($objectType object) {
		return new $sumClassName(1, object);
	}

	/**
	 * This function creates a new formal sum containing a single object with the
	 * supplied coefficient.
	 * 
	 * @param coefficient the coefficient of the element to add
	 * @param object the object to add
	 * @return a new formal sum initializes with a coefficient and basis element
	 */
	public $sumClassName createNewSum($coefficientType coefficient, $objectType object) {
		return new $sumClassName(coefficient, object);
	}

	/**
	 * This function creates a new formal sum with the contents of another sum
	 * copied in.
	 * 
	 * @param contents the formal sum to copy from
	 * @return a new formal sum with the contents of the given one copied in
	 */
	public $sumClassName createNewSum($sumClassName contents) {
		return new $sumClassName(contents);
	}
	
	/**
	 * This function creates a new formal sum initialized with the given coefficient
	 * and object arrays.
	 * 
	 * @param coefficients an array of coefficients 
	 * @param objects an array of basis elements
	 * @return a new formal sum initialized with the given coefficients and basis elements
	 */
	public $sumClassName createNewSum($coefficientType[] coefficients, $objectType[] objects) {
		$sumClassName sum = new $sumClassName();
		
		for (int i = 0; i < coefficients.length; i++) {
			addObject(sum, coefficients[i], objects[i]);
		}
		
		return sum;
	}
	
	#if (!($coefficientType == "int"))
	/**
	 * This function creates a new formal sum initialized with the given coefficient
	 * and object arrays.
	 * 
	 * @param coefficients an array of coefficients 
	 * @param objects an array of basis elements
	 * @return a new formal sum initialized with the given coefficients and basis elements
	 */
	public $sumClassName createNewSum(int[] coefficients, $objectType[] objects) {
		$sumClassName sum = new $sumClassName();
		
		for (int i = 0; i < coefficients.length; i++) {
			addObject(sum, ($coefficientType) coefficients[i], objects[i]);
		}
		
		return sum;
	}
	
	#end
}